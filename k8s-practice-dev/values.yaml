# Default values for k8s-practice-dev.

# Possible values: "dev", "test", "prod"
deploymentType: "dev"

certManager:
  issuers:
    staging: "letsencrypt-staging"
    production: "letsencrypt-prod"

credentials:
  # Override grafana credentials!!!
  grafana:
    adminUser: admin
    adminPassword: ExampleGrafanaPassword
  # Override postgres credentials!!!
  postgres:
    adminPassword: ExampleAdminPassword
    userPassword: ExampleUserPassword
    replicationPassword: ExampleReplicationPassword
  # echo -n "ExamplePortainerPassword" | sha256sum



ingresses:
  - name: api
    namespace: default
    host: "api.k8s-practice.local"
    path: "/"
    pathType: "Prefix"
    serviceNameEnding: "-fastapi"
    servicePort: 8000
    className: "nginx"
    annotations:
      kubernetes.io/ingress.class: "nginx"
    tls:
      enabled: true
      existingSecretName: ""          # e.g. "api-prod-tls" if you're using an existing one
      dev:
        createSecret: true           # If you want Helm to generate a dev secret from local files
        secretName: "api-dev-tls"
        certFile: "certs/api.crt"
        keyFile: "certs/api.key"

  - name: portainer
    namespace: default
    host: "portainer.k8s-practice.local"
    path: "/"
    pathType: "Prefix"
    serviceNameEnding: "-portainer"
    servicePort: 9000
    className: "nginx"
    annotations:
      kubernetes.io/ingress.class: "nginx"
    tls:
      enabled: true
      existingSecretName: ""
      dev:
        createSecret: true
        secretName: "portainer-dev-tls"
        certFile: "certs/portainer.crt"
        keyFile: "certs/portainer.key"

  - name: grafana
    namespace: monitoring
    host: "grafana.k8s-practice.local"
    path: "/"
    pathType: "Prefix"
    serviceNameEnding: "-grafana"
    servicePort: 80
    className: "nginx"
    annotations:
      kubernetes.io/ingress.class: "nginx"
    tls:
      enabled: true
      existingSecretName: ""
      dev:
        createSecret: true
        secretName: "grafana-dev-tls"
        certFile: "certs/grafana.crt"
        keyFile: "certs/grafana.key"


fastapi:
  image: "ghcr.io/storminside/k8s-practice-fastapi-app:latest"
  port: 8000
  redis_db: 0
  cache_timeout: 180
  replicas: 1
  log_level: "debug"


redis:
  image: "redis:7.4"
  port: 6379
  run_args: []
  persistence:
    name: redis-data
    enabled: false
    storageClass: ""
    size: 1Gi


# Override postgres password configuration.
postgresql:
  auth:
    database: test-database
    # Name for a custom user to create
    username: postgres-user
    # Set secret name that contain secretKeys
    existingSecret: postgres-secret
    # Just in case overriding secretKeys names to match template secret
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
      replicationPasswordKey: replication-password
  backup:
    enabled: true
    cronjob:
      storage:
        size: 25Gi

# Set the service type to NodePort to be accessible for administration
  primary:
    persistence:
      enabled: true
      size: 24Gi
    service:
      type: NodePort
      nodePorts:
        postgresql: 30504

  architecture: replication

  readReplicas:
    persistence:
      enabled: true
      size: 24Gi
    service:
      type: NodePort
      nodePorts:
        postgresql: 30505


# Setup for portainer
portainer:
  image:
    tag: 2.21.4
  service:
    type: ClusterIP
#    type: NodePort
#    httpNodePort: 30777
  persistence:
    enabled: true
    size: 1Gi
    accessMode: ReadWriteOnce


kube-prometheus-stack:
  namespaceOverride: monitoring
  grafana:
    admin:
      existingSecret: grafana-secret
    namespaceOverride: monitoring
  kube-state-metrics:
    namespaceOverride: monitoring
  prometheus-node-exporter:
    namespaceOverride: monitoring