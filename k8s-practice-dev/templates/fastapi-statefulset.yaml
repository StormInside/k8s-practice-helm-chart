apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-fastapi
  labels:
    app: {{ .Release.Name }}-fastapi
spec:
  serviceName: {{ .Release.Name }}-fastapi
  replicas: {{ .Values.fastapi.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-fastapi
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-fastapi
    spec:
      initContainers:
      - name: wait-for-redis
        image: busybox
        command:
          - sh
          - -c
          - >
            until nc -z {{ .Release.Name }}-redis {{ .Values.redis.port }}; do
              echo "Waiting for Redis at {{ .Release.Name }}-redis:{{ .Values.redis.port }}";
              sleep 2;
            done
      containers:
      - name: fastapi
        image: {{ .Values.fastapi.image }}
        ports:
          - containerPort: {{ .Values.fastapi.port }}
        resources:
            requests:
                memory: {{ .Values.fastapi.resources.requests.memory }}
                cpu: {{ .Values.fastapi.resources.requests.cpu }}
            limits:
                memory: {{ .Values.fastapi.resources.limits.memory }}
                cpu: {{ .Values.fastapi.resources.limits.cpu }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.fastapi.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.fastapi.port }}
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        env:
          - name: CACHE_TIMEOUT
            value: "{{ .Values.fastapi.cache_timeout }}"
          - name: LOG_LEVEL
            value: "{{ .Values.fastapi.log_level }}"

          - name: POSTGRES_WRITE_SERVICE
            value: "{{ .Release.Name }}-postgresql-primary"
          - name: POSTGRES_READ_SERVICE
            value: "{{ .Release.Name }}-postgresql-read"
          - name: POSTGRES_WRITE_USER
            value: "{{ .Values.postgresql.auth.username }}"
          - name: POSTGRES_READ_USER
            value: "{{ .Values.postgresql.auth.username }}"
          - name: POSTGRES_WRITE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: password
          - name: POSTGRES_READ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: password
          - name: POSTGRES_DATABASE
            value: "{{ .Values.postgresql.auth.database }}"

          # The redis hostname follows the pattern:
          #   <statefulset name>-<index>.<service name>.<namespace>.svc.cluster.local
          # For example:
          #   mychart-redis-0.mychart-redis.default.svc.cluster.local
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: REDIS_PORT
            value: "{{ .Values.redis.port }}"
          - name: REDIS_SERVICE
            value: "{{ .Release.Name }}-redis"
          - name: REDIS_DB
            value: "{{ .Values.fastapi.redis_db }}"








