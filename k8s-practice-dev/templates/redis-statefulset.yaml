apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-redis
  labels:
    app: {{ .Release.Name }}-redis
spec:
  serviceName: {{ .Release.Name }}-redis
  replicas: {{ .Values.fastapi.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-redis
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-redis
    spec:
      containers:
      - name: redis
        image: {{ .Values.redis.image }}
        ports:
        - containerPort: {{ .Values.redis.port }}
        resources:
          requests:
            memory: {{ .Values.redis.resources.requests.memory }}
            cpu: {{ .Values.redis.resources.requests.cpu }}
          limits:
            memory: {{ .Values.redis.resources.limits.memory }}
            cpu: {{ .Values.redis.resources.limits.cpu }}
        command: ["redis-server"]
        args: {{ .Values.redis.run_args }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.redis.port }}
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          tcpSocket:
            port: {{ .Values.redis.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        {{- if and .Values.redis.persistence.enabled (ne .Values.redis.persistence.storageClass "") }}
        volumeMounts:
          - name: redis-data
            mountPath: /data
        {{- end }}
  {{- if and .Values.redis.persistence.enabled (ne .Values.redis.persistence.storageClass "") }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.redis.persistence.name }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.redis.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.redis.persistence.size }}
  {{- end }}
